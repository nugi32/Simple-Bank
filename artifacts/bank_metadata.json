{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "employee",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "role",
						"type": "string"
					}
				],
				"name": "EmployeeAssigned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "employee",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "role",
						"type": "string"
					}
				],
				"name": "EmployeeRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "netAmount",
						"type": "uint256"
					}
				],
				"name": "User_deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "uint8",
						"name": "age",
						"type": "uint8"
					}
				],
				"name": "User_registered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "User_transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "uint8",
						"name": "age",
						"type": "uint8"
					}
				],
				"name": "User_unregistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "User_withdraw",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "oldFee",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "newFee",
						"type": "uint256"
					}
				],
				"name": "deposit_fee_changed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "managementWallet",
						"type": "address"
					}
				],
				"name": "managementWallet_address",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "profit_withdraw",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "oldFee",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "newFee",
						"type": "uint256"
					}
				],
				"name": "transfer_fee_changed",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newEmployee",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "role",
						"type": "string"
					}
				],
				"name": "assignNewEmployee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "employeeCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "role",
						"type": "string"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "uint8",
						"name": "age",
						"type": "uint8"
					}
				],
				"name": "register",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "employee",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "role",
						"type": "string"
					}
				],
				"name": "removeEmployee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "seeMyBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "see_Contract_Balances",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newDepositFeePercent",
						"type": "uint256"
					}
				],
				"name": "set_deposit_fee_percent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newTransferFeePercent",
						"type": "uint256"
					}
				],
				"name": "set_transfer_fee_percent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalUsers",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unregister",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawCollectedFees",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "nugi",
			"details": "This contract is abstract and must be extended to implement additional banking features      Inherits access control from employe_assignment and security from ReentrancyGuard",
			"events": {
				"EmployeeAssigned(address,string)": {
					"params": {
						"employee": "The address of the newly assigned employee",
						"role": "The role assigned to the employee"
					}
				},
				"EmployeeRemoved(address,string)": {
					"params": {
						"employee": "The address of the removed employee",
						"role": "The role that was removed"
					}
				},
				"User_deposit(address,uint256)": {
					"params": {
						"netAmount": "Amount deposited after fees",
						"user": "Address of the depositing user"
					}
				},
				"User_registered(address,string,uint8)": {
					"params": {
						"age": "User's registered age",
						"name": "User's registered name",
						"user": "Address of the newly registered user"
					}
				},
				"User_transfer(address,address,uint256)": {
					"params": {
						"amount": "Amount transferred",
						"to": "Address of the recipient",
						"user": "Address of the sender"
					}
				},
				"User_unregistered(address,string,uint8)": {
					"params": {
						"age": "User's age at time of unregistration",
						"name": "User's name at time of unregistration",
						"user": "Address of the unregistered user"
					}
				},
				"User_withdraw(address,uint256)": {
					"params": {
						"amount": "Amount withdrawn",
						"user": "Address of the withdrawing user"
					}
				},
				"deposit_fee_changed(uint256,uint256)": {
					"params": {
						"newFee": "New fee percentage",
						"oldFee": "Previous fee percentage"
					}
				},
				"managementWallet_address(address)": {
					"params": {
						"managementWallet": "Address of the management wallet"
					}
				},
				"profit_withdraw(uint256)": {
					"params": {
						"amount": "Amount of profits withdrawn"
					}
				},
				"transfer_fee_changed(uint256,uint256)": {
					"params": {
						"newFee": "New fee percentage",
						"oldFee": "Previous fee percentage"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"assignNewEmployee(address,string)": {
					"details": "Only the owner can assign new employees",
					"params": {
						"newEmployee": "Address of the employee to be assigned",
						"role": "Role to assign to the employee"
					}
				},
				"constructor": {
					"details": "Sets initial fee percentages to 1%",
					"params": {
						"_management_Wallet": "Address that will receive collected fees"
					}
				},
				"deposit()": {
					"details": "A deposit fee is deducted from the deposited amount"
				},
				"hasRole(address,string)": {
					"params": {
						"account": "Address to check",
						"role": "Role to check for"
					},
					"returns": {
						"_0": "bool True if the account has the specified role"
					}
				},
				"register(string,uint8)": {
					"details": "Increases usercount upon successful registration",
					"params": {
						"age": "User's age (must be between 18-99)",
						"name": "User's full name"
					}
				},
				"removeEmployee(address,string)": {
					"details": "Only the owner can remove employee roles",
					"params": {
						"employee": "Address of the employee to remove the role from",
						"role": "Role to remove from the employee"
					}
				},
				"seeMyBalance()": {
					"returns": {
						"_0": "User's current balance in wei"
					}
				},
				"see_Contract_Balances()": {
					"returns": {
						"_0": "Contract balance in ether (not wei)"
					}
				},
				"set_deposit_fee_percent(uint256)": {
					"details": "Maximum fee is capped at 100%",
					"params": {
						"_newDepositFeePercent": "New deposit fee percentage (1 = 1%)"
					}
				},
				"set_transfer_fee_percent(uint256)": {
					"details": "Maximum fee is capped at 100%",
					"params": {
						"_newTransferFeePercent": "New transfer fee percentage (1 = 1%)"
					}
				},
				"totalUsers()": {
					"returns": {
						"_0": "Count of registered users"
					}
				},
				"transfer(address,uint256)": {
					"details": "A transfer fee is deducted from the sender's balance",
					"params": {
						"amount": "The amount to transfer in wei",
						"to": "The address of the recipient"
					}
				},
				"unregister()": {
					"details": "Refunds any remaining balance to the user's address"
				},
				"withdraw(uint256)": {
					"details": "Checks for sufficient balance before processing withdrawal",
					"params": {
						"amount": "Amount to withdraw in wei"
					}
				},
				"withdrawCollectedFees()": {
					"details": "Resets collectedFees to zero after successful withdrawal"
				}
			},
			"title": "Abstract Banking System",
			"version": 1
		},
		"userdoc": {
			"events": {
				"EmployeeAssigned(address,string)": {
					"notice": "Emitted when a new employee is assigned"
				},
				"EmployeeRemoved(address,string)": {
					"notice": "Emitted when an employee is removed"
				},
				"User_deposit(address,uint256)": {
					"notice": "Emitted when a user deposits funds"
				},
				"User_registered(address,string,uint8)": {
					"notice": "Emitted when a new user registers with the bank"
				},
				"User_transfer(address,address,uint256)": {
					"notice": "Emitted when a user transfers funds to another user"
				},
				"User_unregistered(address,string,uint8)": {
					"notice": "Emitted when a user unregisters from the bank"
				},
				"User_withdraw(address,uint256)": {
					"notice": "Emitted when a user withdraws funds"
				},
				"deposit_fee_changed(uint256,uint256)": {
					"notice": "Emitted when deposit fee percentage is changed"
				},
				"managementWallet_address(address)": {
					"notice": "Emitted when management wallet address is set or changed"
				},
				"profit_withdraw(uint256)": {
					"notice": "Emitted when profits are withdrawn to the management wallet"
				},
				"transfer_fee_changed(uint256,uint256)": {
					"notice": "Emitted when transfer fee percentage is changed"
				}
			},
			"kind": "user",
			"methods": {
				"assignNewEmployee(address,string)": {
					"notice": "Assigns a new employee with a specific role"
				},
				"constructor": {
					"notice": "Initializes the bank contract with a management wallet for fee collection"
				},
				"deposit()": {
					"notice": "Allows a user to deposit ETH into their bank account"
				},
				"employeeCount()": {
					"notice": "Total number of employees currently assigned"
				},
				"hasRole(address,string)": {
					"notice": "Checks if an address has a specific role"
				},
				"register(string,uint8)": {
					"notice": "Allows a new user to register with the bank"
				},
				"removeEmployee(address,string)": {
					"notice": "Removes an employee's role"
				},
				"seeMyBalance()": {
					"notice": "Allows a user to check their current account balance"
				},
				"see_Contract_Balances()": {
					"notice": "Returns the contract's current ETH balance in whole ether"
				},
				"set_deposit_fee_percent(uint256)": {
					"notice": "Sets the deposit fee percentage"
				},
				"set_transfer_fee_percent(uint256)": {
					"notice": "Sets the transfer fee percentage"
				},
				"totalUsers()": {
					"notice": "Returns the total number of registered users"
				},
				"transfer(address,uint256)": {
					"notice": "Transfers funds from sender to another registered user"
				},
				"unregister()": {
					"notice": "Allows a registered user to close their account and withdraw remaining funds"
				},
				"withdraw(uint256)": {
					"notice": "Allows a user to withdraw ETH from their bank account"
				},
				"withdrawCollectedFees()": {
					"notice": "Allows authorized employees to withdraw collected fees to the management wallet"
				}
			},
			"notice": "Provides core banking features including user registration, deposits, withdrawals, and transfers",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Data/Bank.sol": "bank"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"Data/Bank.sol": {
			"keccak256": "0x3c077143a178c0aa5ac012c3e5c6b63b4e8b9b8de0f1a56766ae756b2f0d21f3",
			"license": "MIT",
			"urls": [
				"bzz-raw://fd81d2c79f8518ef8c640cea4d336a95760f0462261f207d221f390e04fde10e",
				"dweb:/ipfs/QmbdzHtFrWoJvuhou36W6Dc45ckfPCHaeEyAHK2tvn2i2Z"
			]
		},
		"Interface/Ibank.sol": {
			"keccak256": "0x47f9ea8586d63c179e5e516537157bde4220f8bc4935ae8857cb4150e6c76380",
			"license": "MIT",
			"urls": [
				"bzz-raw://df1478666c75be30b908a151116f1f189ae6c8147ad72f13547c5f56735eea85",
				"dweb:/ipfs/Qmb5u6NffSRdL6y4KBC1difqza53JviLc1Hige4GRYz9ha"
			]
		},
		"Interface/Iemploye_assignment.sol": {
			"keccak256": "0xf193241286d526af195bdbdfe29778a33224c8bb5b1056101d85dd3326bef916",
			"license": "MIT",
			"urls": [
				"bzz-raw://e559023f4b159e62ec1422648392eee1687fd36a0041f731b0655106b7136db4",
				"dweb:/ipfs/QmZ1vgEaMB3tb5GFn5fe5pb9bgQoG1NpvNZ5TD3uX4aRmH"
			]
		},
		"Owner/employe_assignment.sol": {
			"keccak256": "0x23f02464d38756f38daec976c99ddc72df109086465e0e60c31e6ac2b5970103",
			"license": "MIT",
			"urls": [
				"bzz-raw://9a5b5447d8b02764d20012f1f02ba7de03892f0d83409c9da5b07e990b3a4f44",
				"dweb:/ipfs/QmRgbQfhj3KwhC19PnJeYobUWRbJiw9BaG2VGr6XhU1eUP"
			]
		},
		"lib/regular.sol": {
			"keccak256": "0x27da5518e7018a88c6ca200f460529e3386e13fc209d270578fed0cbff79e86e",
			"license": "MIT",
			"urls": [
				"bzz-raw://f1263b40b1852f7ecb8c4a678f7654b5b1e77fb3085c4b9eb02a3f0b267657a8",
				"dweb:/ipfs/QmTDd7jJMy3gXjg7RRj5j1B7hJdimNrJqo8Q8czmiRUu5Y"
			]
		}
	},
	"version": 1
}