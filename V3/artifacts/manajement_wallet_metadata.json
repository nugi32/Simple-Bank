{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "_loan_contract",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "employee",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "role",
						"type": "string"
					}
				],
				"name": "EmployeeAssigned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "employee",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "role",
						"type": "string"
					}
				],
				"name": "EmployeeRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnerChanged",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newEmployee",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "role",
						"type": "string"
					}
				],
				"name": "assignNewEmployee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "changeOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "new_loan_contract",
						"type": "address"
					}
				],
				"name": "change_loan_contract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "employeeCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "role",
						"type": "string"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "employee",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "role",
						"type": "string"
					}
				],
				"name": "removeEmployee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "see_contract_balances",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "balances",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer_to_loan_contract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "Inherits ownership & employee access control from `employe_assignment`",
			"events": {
				"EmployeeAssigned(address,string)": {
					"params": {
						"employee": "The address of the newly assigned employee",
						"role": "The role assigned to the employee"
					}
				},
				"EmployeeRemoved(address,string)": {
					"params": {
						"employee": "The address of the removed employee",
						"role": "The role that was removed"
					}
				},
				"OwnerChanged(address,address)": {
					"params": {
						"newOwner": "The address of the new owner",
						"oldOwner": "The address of the previous owner"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"assignNewEmployee(address,string)": {
					"details": "Only the owner can assign new employees. Validates role and address.",
					"params": {
						"newEmployee": "Address of the employee to be assigned",
						"role": "Role to assign to the employee"
					}
				},
				"changeOwner(address)": {
					"details": "Only the current owner can call this function. Validates the new owner address.",
					"params": {
						"newOwner": "Address of the new owner"
					}
				},
				"change_loan_contract(address)": {
					"params": {
						"new_loan_contract": "New loan contract address"
					}
				},
				"constructor": {
					"params": {
						"_loan_contract": "Address of the loan contract"
					}
				},
				"hasRole(address,string)": {
					"params": {
						"account": "Address to check",
						"role": "Role to check for"
					},
					"returns": {
						"_0": "bool True if the account has the specified role"
					}
				},
				"removeEmployee(address,string)": {
					"details": "Only the owner can remove employee roles. Validates role and current assignment.",
					"params": {
						"employee": "Address of the employee to remove the role from",
						"role": "Role to remove from the employee"
					}
				},
				"see_contract_balances()": {
					"details": "Access restricted to employees",
					"returns": {
						"balances": "Current balance expressed in whole ETH"
					}
				},
				"transfer_to_loan_contract(uint256)": {
					"details": "Only callable by employees. Validates amount > 0 and sufficient balance before sending.",
					"params": {
						"amount": "Amount in wei to transfer"
					}
				}
			},
			"title": "Management Wallet",
			"version": 1
		},
		"userdoc": {
			"events": {
				"EmployeeAssigned(address,string)": {
					"notice": "Emitted when a new employee is assigned"
				},
				"EmployeeRemoved(address,string)": {
					"notice": "Emitted when an employee is removed"
				},
				"OwnerChanged(address,address)": {
					"notice": "Emitted when the contract owner is changed"
				}
			},
			"kind": "user",
			"methods": {
				"assignNewEmployee(address,string)": {
					"notice": "Assigns a new employee with a specific role"
				},
				"changeOwner(address)": {
					"notice": "Transfers ownership to a new address"
				},
				"change_loan_contract(address)": {
					"notice": "Change the linked loan contract address"
				},
				"constructor": {
					"notice": "Initializes the management wallet with the linked loan contract"
				},
				"employeeCount()": {
					"notice": "Total number of employees currently assigned"
				},
				"hasRole(address,string)": {
					"notice": "Checks if an address has a specific role"
				},
				"removeEmployee(address,string)": {
					"notice": "Removes an employee's role"
				},
				"see_contract_balances()": {
					"notice": "Returns the current contract balance in ETH"
				},
				"transfer_to_loan_contract(uint256)": {
					"notice": "Transfer ETH from this wallet to the loan contract"
				}
			},
			"notice": "Handles fund storage and controlled transfers between the loan contract and the owner walletthis is deployed contract for admind and not data storage only",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Data/Management_Wallet.sol": "manajement_wallet"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Data/Management_Wallet.sol": {
			"keccak256": "0x2a9b4eb8c43819f5f31c38700b97f469e20509d0ba5ba76f7524577a7fc9a50b",
			"license": "MIT",
			"urls": [
				"bzz-raw://536e564f8756c521f3fdcf3cbef384ce0034065ae642afefb859000bb489dda8",
				"dweb:/ipfs/QmVkrn4uWcFim7UMkvPU76EQ58jwKLbM8WfNbmHUugwQsD"
			]
		},
		"Interface/Iemploye_assignment.sol": {
			"keccak256": "0xec0a39728b30db92ef38bb7504ee474ac143c61ba0c75160203837821050c058",
			"license": "MIT",
			"urls": [
				"bzz-raw://b324f600d6b02bc2b3d8d06263c16e34cf252561c55cff6bc8856c002d62a53e",
				"dweb:/ipfs/QmZdKzSsZSoNRrSoLtBQtqrUjJ9WpUJqiBTBfRJXWzoNTz"
			]
		},
		"Owner/employe_assignment.sol": {
			"keccak256": "0x3647448ddbbb3cfdbfe1801a500a8fcdc9a27f75bae60b5981e55c1c5adcb3d0",
			"license": "MIT",
			"urls": [
				"bzz-raw://e2f58cf1a31cc754d005bc6e466956577914792cbd6b6ef87eaab9e693807b06",
				"dweb:/ipfs/QmSVwvPyLvadiZti3t9pjAUurU3CJvSuL6i2LDM32xFwaW"
			]
		},
		"lib/addresUtils.sol": {
			"keccak256": "0x1e497a9b116e11b4aeba20c828837349a214c8c2dda752607c990f4d8711d5f8",
			"license": "MIT",
			"urls": [
				"bzz-raw://c9a60ee6513e43e8fa1d49e4c8d71305c0626ec95b0b13bd81e185857abe102c",
				"dweb:/ipfs/Qmc55Fi4is22S1PoFoVJdQ1MKNo7bFxNLNmH1tg5RE7nPQ"
			]
		},
		"lib/regular.sol": {
			"keccak256": "0x27da5518e7018a88c6ca200f460529e3386e13fc209d270578fed0cbff79e86e",
			"license": "MIT",
			"urls": [
				"bzz-raw://f1263b40b1852f7ecb8c4a678f7654b5b1e77fb3085c4b9eb02a3f0b267657a8",
				"dweb:/ipfs/QmTDd7jJMy3gXjg7RRj5j1B7hJdimNrJqo8Q8czmiRUu5Y"
			]
		}
	},
	"version": 1
}